buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
    }
}

plugins {
    //id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id 'java'
}

apply plugin: 'com.google.cloud.tools.appengine'
apply plugin: "io.spring.dependency-management"

group = 'com.project.dev'
def rootPackage = "${group}".replaceAll("\\.", "/")

def mainClass = "${group}.Application"
def mainFile = "${mainClass}".replaceAll("\\.", "/")

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    classifier = 'min'
    manifest {
        attributes(
            'Main-Class': "${mainClass}"
        )
    }
}

application {
    mainClassName = "${mainClass}"
}

task fatJar(type: Jar) {
    //classifier = ''
    manifest.from jar.manifest
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task jarLib(type: Jar) {
    classifier = 'min-lib'
    exclude "${mainFile}.class"
    exclude "${rootPackage}/tester"
    manifest.from jar.manifest
    with jar
}

task fatJarLib(type: Jar) {
    classifier = 'lib'
    exclude "${mainFile}.class"
    exclude "${rootPackage}/tester"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.from jar.manifest
    with fatJar
}

artifacts {
    archives jar
    archives fatJar
    archives jarLib
    archives fatJarLib
}

processResources {
    includeEmptyDirs = false
    exclude '**/.gitkeep'
    from ('src/main/java') {
        include '**/*.dll'
    }
}

pluginManager.withPlugin('org.springframework.boot') {

    springBoot {
        mainClass = "${mainClass}"
    }

    bootRun {
        standardInput = System.in
    }

    bootJar {
        mainClassName = "${mainClass}"
        archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
    jcenter()
}

ext {
    //set('springCloudVersion', "2020.0.2")
    mapstructVersion = "1.3.0.Final"
}

compileJava {
    options.compilerArgs = [
        //'-Amapstruct.defaultComponentModel=spring',
        //'-Amapstruct.suppressGeneratorTimestamp=true',
        //'-Amapstruct.suppressGeneratorVersionInfoComment=true'
    ]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    //implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.4.0'
    //implementation group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '4.4.0'
}

test {
    useJUnitPlatform()
}
